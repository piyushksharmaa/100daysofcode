/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* solver(vector<int>& inorder,int is,int ie,vector<int>& postorder,int ps,int pe,map<int,int>& mp){
        if(is>ie or ps>pe){
            return NULL;
        }
        TreeNode* root=new TreeNode(postorder[pe]);
        int pos_in_inorder=mp[postorder[pe]];
        int left_elements=pos_in_inorder-is;
        root->left=solver(inorder,is,pos_in_inorder-1,postorder,ps,ps+left_elements-1,mp);
        root->right=solver(inorder,pos_in_inorder+1,ie,postorder,ps+left_elements,pe-1,mp);
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(int(inorder.size())!=int(postorder.size())){
            return NULL;
        }
        map<int,int> mp;
        for(int i=0;i<int(inorder.size());i++){
            mp[inorder[i]]=i;
        }
        return solver(inorder,0,int(inorder.size()-1),postorder,0,int(postorder.size()-1),mp);
    }
};
