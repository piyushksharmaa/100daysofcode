Approach : 
Because we need to bring everyone to node 0, we can model the graph as a tree rooted at node 0 (the problem statement hints at this by stating that 
the network forms a tree structure). We can imagine that in order to move from any node to the root, all edges must be directed from a child to its parent. 
If there is an edge from a parent node to its child node, no node in the subtree of the child can reach the root node. This edge must be flipped.
So, our task is to count the number of edges in a tree rooted at node '0' that are directed from the parent node to a child node.
We must traverse the entire tree to determine the number of such edges that are directed from the parent to the child node. To traverse the tree, we can use a 
graph traversal algorithm such as depth-first search (DFS).
In DFS, we use a recursive function to explore nodes as far as possible along each branch. Upon reaching the end of a branch, we backtrack to the previous node 
and continue exploring the next branches.
Once we encounter an unvisited node, we will take one of its neighbor nodes (if exists) as the next node on this branch. Recursively call the function to take 
the next node as the 'starting node' and solve the subproblem.
The caveat is that our edges are directed. To count the number of edges that are directed from a parent to its child node, we must traverse the entire tree. 
If there is an edge from a child to its parent node, we will be unable to reach the child from the parent.
To traverse the entire tree, we must find a way to get from node 0 to all of the nodes in any case. This is possible if the edges are treated as undirected. 
We add an opposite edge from node b to node a for every given edge in connections from node a to node b. Let us refer to the edge we added as an "artificial" 
edge and the edge present in connections as an "original" edge.
If we use an "artificial" edge to move from the parent node to the child node, we know that the original edge is directed from the child node to the parent node. 
We don't need to flip the "original" edge.
If we use an "original" edge to move from the parent node to the child node, it means we need to flip this edge. Whenever we encounter such an edge, we will 
increment our answer variable by 1.
We can distinguish between an "original" and an "artificial" edge in many different ways (assigning booleans, specific numbers, etc.). In this article, 
we will associate an extra value with each edge - 1 for "original" edges and 0 for "artificial" edges.
We also set an answer variable count = 0 to count the number of edges that must be flipped. Now we start a DFS from node 0 and work our way down the tree 
(from parent to child). If we come across an "original" edge during the traversal, that is, an edge labeled with a 1, we increase the count by one. We don't 
modify count if we come across an "artificial" edge. We can combine these two operations and perform count += sign where sign is either 0 or 1 indicating an 
"artificial" or "original" edge.
We have our answer in count at the end of the traversal.




class Solution {
public:
    int count=0;
    void solver(int node,int parent,vector<pair<int,int>> adj[]){
        for(int i=0;i<adj[node].size();i++){
            pair<int,int> temp=adj[node][i];
            if(temp.first!=parent){
                count+=(temp.second);
                solver(temp.first,node,adj);
            }
        }
    }
    int minReorder(int n, vector<vector<int>>& connections) {
        int edges=connections.size();
        vector<pair<int,int>> adj[n]; 
        for(int i=0;i<edges;i++){
            adj[connections[i][0]].push_back({connections[i][1],1});
            adj[connections[i][1]].push_back({connections[i][0],0});
        }
        solver(0,-1,adj);
        return count;
    }
};

Time complexity: O(n)
We need O(n) time to initialize the adjacency list. The dfs function visits each node once, which takes O(n) time in total. Because we have undirected edges, 
each edge can only be iterated twice (by nodes at the end), resulting in O(e) operations total while visiting all nodes, where e is the number of edges. 
Because the given graph is a tree, there are nâˆ’1 undirected edges, so O(n+e)=O(n).

Space complexity: O(n)
Building the adjacency list takes O(n) space.
The recursion call stack used by dfs can have no more than n elements in the worst-case scenario. It would take up O(n) space in that case.


Approach : Using BFS


class Solution {
public:
    int count=0;
    void solver(int node,int n,vector<pair<int,int>> adj[]){
        queue<int> q;
        vector<bool> visit(n,0);
        q.push(node);
        visit[node]=true;
        while(!q.empty()){
            int size=q.size();
            for(int i=0;i<size;i++){
                node=q.front();
                q.pop();
                for(int j=0;j<adj[node].size();j++){
                    pair<int,int> temp=adj[node][j];
                    if(!visit[temp.first]){
                        count+=(temp.second);
                        visit[temp.first]=true;
                        q.push(temp.first);
                    }
                }
            }
        }
    }
    int minReorder(int n, vector<vector<int>>& connections) {
        int edges=connections.size();
        vector<pair<int,int>> adj[n]; 
        for(int i=0;i<edges;i++){
            adj[connections[i][0]].push_back({connections[i][1],1});
            adj[connections[i][1]].push_back({connections[i][0],0});
        }
        solver(0,n,adj);
        return count;
    }
};
