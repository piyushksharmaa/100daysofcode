//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    int countSpecialNumbers(int n, vector<int> arr) {
        // Code here
        //We will store all the prime factors of each elements in set
        // 2 - 2
        // 3 - 3
        // 6 - 2,3
        
        // Another approach coming in my mind is to first sort the array and then 
        // Traverse the whole array and check if the curr_ele factors are there in the set or not
        // This approach also won't work here as factors may come from different numbers
        
        /*
        
        Now one thing that come in my mind is that if a number is repeating then we can just 
        simply add its frequency to my answer so for that i will maintain a map
        
        And, for other numbers 
        What we will do is we will first store unique occurrences of each element in a set.
        and then we will use the concept of sieve here.
        
        Let's look an example
        
        2,3,6,5,5
        
        So freq map will look like 2-1, 3-1, 5-2, 6-1
        
        Now we will also maintain a distinct element set that will be 2,3,5,6
        
        and we will run sieve to find whether are there any numbers divisible by them or not
        and if they are divisible then we will store them in a different set because 2 and 3 
        both are factor of 6 so there can be duplicacy.
        
        Now you must be thinking that it let's say there is a number which is occuuring more 
        than one time and it is also occurring as a multiple of one the element then it will 
        be count twice right?
        
        No, we will check first whether it is appearing more than 1 times and if yes then we 
        will add its frequency otherwise check whether the element is there in set or not? If present
        then add 1.
        
        */ 
        map<int,int> freq;
        unordered_set<int> distinct;
        unordered_set<int> store_ans;
        int ans=0;
        int max_ele=0;   // To run sieve till here only it will help in reducing our time complexity
        for(int i=0;i<n;i++){
            freq[arr[i]]++;
            max_ele=max(max_ele,arr[i]);
            distinct.insert(arr[i]);
        }
        for(auto it: distinct){
            for(int i=2*it;i<=max_ele;i+=it){
                if(distinct.count(i)){
                    store_ans.insert(i);
                }
            }
        }
        for(auto it: freq){
            if(it.second>1){
                ans+=(it.second);
            }
            else if(store_ans.count(it.first)){
                ans+=1;
            }
        }
        return ans;
    }
};


//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int N;
        cin >> N;
        vector<int> arr(N);
        for (int i = 0; i < N; i++) {
            cin >> arr[i];
        }

        Solution ob;
        cout << ob.countSpecialNumbers(N, arr) << endl;
    }
    return 0;
}
// } Driver Code Ends
