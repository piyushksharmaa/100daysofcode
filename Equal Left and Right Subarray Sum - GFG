class Solution {
  public:
    int equalSum(int n, vector<int> &A) {
        // code here
        // 1 3 5 2 2
        vector<int> suffix_sum;
        int sum=0;
        for(int i=n-1;i>=0;i--){
            sum+=(A[i]);
            suffix_sum.push_back(sum);
        }
        // 2 4 9 12 13
        reverse(suffix_sum.begin(),suffix_sum.end());
        // 13 12 9 4 2
        // We can insert a zero in the end so as to avoid any edge cases that is for the 
        // checking of last element
        
        // 13 12 9 4 2 0
        suffix_sum.push_back(0);
        int pref_sum=0;
        for(int i=0;i<n;i++){
            if(pref_sum==suffix_sum[i+1]){
                return i+1;
            }
            // i=0  pref_sum=0 suffix_sum[i+1]=12  ->  Not Equal
            // i=1  pref_sum=1 suffix_sum[i+1]=9   ->  Not Equal
            // i=2  pref_sum=4 suffix_sum[i+1]=4   ->  Equal 
            pref_sum+=A[i];
        }
        return -1;
    }
};
