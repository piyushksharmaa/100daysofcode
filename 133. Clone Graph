/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

/*

We are able to do this question using both DFS and BFS.
Just one important thing we have to consider here that, Suppose we are standing on any particular node and we want to make a copy of the node then we have to keep a record that whether the copy of this node is already created or not.


*/

class Solution {
public:
    Node* dfs(Node* node,unordered_map<Node*,Node*>& mp){
        vector<Node*> neighbours;
        Node* clone=new Node(node->val);
        mp[node]=clone;
        for(auto it: node->neighbors){
            if(mp.find(it)!=mp.end()){
                neighbours.push_back(mp[it]);
            }
            else{
                neighbours.push_back(dfs(it,mp));
            }
        }
        clone->neighbors=neighbours;
        return clone;
    }
    Node* cloneGraph(Node* node) {
        unordered_map<Node*,Node*> mp;
        if(node==NULL){
            return NULL;
        }
        return dfs(node,mp);
    }
};
