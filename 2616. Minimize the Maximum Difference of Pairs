The solution consist of 3 steps:

Sort the nums vector so that all the elements with minimum difference will be adjacent.
Apply binary search with helper function on answer with start = 0 & end = 1e9 (as per constraints).
Helper function will check that if the given answer is possible, if it is then, it will set end = mid-1, else, it will set start = mid+1.
C++ implementation for the above approach ðŸ‘‡

class Solution {
public:
    
    bool helper(int mid, vector<int>& nums, int p){
        int ct = 0;
        // helper function counts how many pairs are possible with the following 'mid',
        for(int i = 1; i < nums.size(); i++){
            if(nums[i]-nums[i-1] <= mid){
                ct++;
                i++;
            }
        }
        // if count of pairs is more than 'p', then, the given mid can be a possible answer.
        return ct >= p;
    }
    
    int minimizeMax(vector<int>& nums, int p) {
        sort(nums.begin(), nums.end());
        int st = 0, end = 1e9, mid, res;
        while(st <= end){
            mid = st + (end-st)/2;
            //checking if 'mid' can be a possible answer.
            if(helper(mid, nums, p)){
                // if 'mid' can be a answer, store it and try to minimize if possible.
                res = mid;
                end = mid-1;
            }
            else st = mid+1;
        }
        return res;
    }
};






// Brute force approach can be that rather than using binary search we will use a simple for loop from 0 to max_diff possible that is max_ele-min_ele







class Solution {
public:
    bool solver(int mid,vector<int>& nums,int p){
        int count=0;
        for(int i=1;i<int(nums.size());i++){
            if((nums[i]-nums[i-1])<=mid){
                count++;
                i++;
            }
        }
        return count>=p;
    }
    int minimizeMax(vector<int>& nums, int p) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
        // 1 2 2 4 
        /*
        int prev_diff=-1;
        priority_queue<int> pq;
        vector<int> remaining_element;
        for(i->1 to n-1){
            int diff1=nums[i]-nums[i-1];
            
        }
        
        */
        long long int start=0,end=1e9;
        int ans=INT_MAX;
        while(start<=end){
            long long int mid=start+(end-start)/2;
            if(solver(mid,nums,p)){
                ans=mid;
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
        return ans; 
    }
};



