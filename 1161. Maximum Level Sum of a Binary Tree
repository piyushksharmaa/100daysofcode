/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void solver(int level,TreeNode* root,vector<int>& sumofnodes){
        if(root==NULL){
            return ;
        }
        if(level==sumofnodes.size()){
            sumofnodes.push_back(root->val);
        }
        else{
            sumofnodes[level]+=root->val;
        }
        solver(level+1,root->left,sumofnodes);
        solver(level+1,root->right,sumofnodes);
    }
    int maxLevelSum(TreeNode* root) {
        // we can use level order traversal to find the level wise sum and then update the max_sum accordingly.
//         queue<TreeNode*> q;
//         q.push(root);
//         int max_sum=INT_MIN;
//         int level=0;
//         int smallest_level=0;
//         while(!q.empty()){
//             int size=q.size();
//             level++;
//             int curr_sum=0;
//             for(int i=0;i<size;i++){
//                 TreeNode* ele=q.front();
//                 q.pop();
//                 if(ele->left){
//                     q.push(ele->left);
//                 }
//                 if(ele->right){
//                     q.push(ele->right);
//                 }
//                 curr_sum+=ele->val;
//             }
//             if(max_sum<curr_sum){
//                 smallest_level=level;
//                 max_sum=max(max_sum,curr_sum);
//             }
            
//         }
//         return smallest_level;
        
        // Using DFS
        
        // In this what we have done is initialize a vector of sumofnodes and then call dfs function in which we have passed level so as to store level sum.
        // In this if at any point we encounter that level==sumofnodes.size() then we will store the value of root->val in new position so we need to expand accordingly and if it is less then we will just store accordingly.
        
        vector<int> sumofNodes;
        solver(0,root,sumofNodes);
        int max_sum=INT_MIN;
        int level=0;
        for(int i=0;i<int(sumofNodes.size());i++){
            if(max_sum<sumofNodes[i]){
                max_sum=sumofNodes[i];
                level=i+1;
            }
        }
        return level;
    }
};
