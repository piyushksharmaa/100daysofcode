class Solution {
public:
    // 2D grid - 
    // 0's - Land     1's - Water
    // Island is basically 4 directionally connected group of 0's and a closed island is an island 
    // totally surrounded by 1's 
    // So this question is saying that we need to find number of closed islands
    // and condition for closed island is that it must surrounded by 1's from all the 4 sided
    // So as to satisfy this condition what we must do is we would first traverse on the outer boundary 
    // of the array and make all the 0's and their connected 0's - 1's as they are not totally cover up 
    // with 1's 
    
    void solver(int i,int j,vector<vector<int>>& visited,vector<vector<int>>& grid){
        if(i<0 or j<0 or i>=grid.size() or j>=grid[0].size() or grid[i][j]==1 or visited[i][j]==1){
            return ;
        }
        visited[i][j]=1;
        solver(i+1,j,visited,grid);
        solver(i-1,j,visited,grid);
        solver(i,j+1,visited,grid);
        solver(i,j-1,visited,grid);
    }
    void solver1(int i,int j,vector<vector<int>>& grid,vector<vector<int>>& visited){
        queue<pair<int,int>> q;
        q.push({i,j});
        visited[i][j]=1;
        while(!q.empty()){
            int q_size=q.size();
            for(int i=0;i<q_size;i++){
                pair<int,int> temp=q.front();
                q.pop();
                int x=temp.first;
                int y=temp.second;
                if(x-1>=0 and grid[x-1][y]==0 and visited[x-1][y]==0){
                    q.push({x-1,y});
                    visited[x-1][y]=1;
                }
                if(x+1<grid.size() and grid[x+1][y]==0 and visited[x+1][y]==0){
                    q.push({x+1,y});
                    visited[x+1][y]=1;
                }
                if(y-1>=0 and grid[x][y-1]==0 and visited[x][y-1]==0){
                    q.push({x,y-1});
                    visited[x][y-1]=1;
                }
                if(y+1<grid[0].size() and grid[x][y+1]==0 and visited[x][y+1]==0){
                    q.push({x,y+1});
                    visited[x][y+1]=1;
                }
            }
        }
    }
    int closedIsland(vector<vector<int>>& grid) {
        // int n=grid.size();
        // int m=grid[0].size();
        // vector<vector<int>> visited(n,vector<int>(m,0));
        // // for(int i=0;i<n;i++){
        // //     for(int j=0;j<m;j++){
        // //         cout<<grid[i][j]<<" ";
        // //     }
        // //     cout<<endl;
        // // }
        // // cout<<endl;
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<m;j++){
        //         if((i==0 or j==0 or i==n-1 or j==m-1) and visited[i][j]==0 and grid[i][j]==0){
        //             solver(i,j,visited,grid);
        //         }
        //     }
        // }
        // // for(int i=0;i<n;i++){
        // //     for(int j=0;j<m;j++){
        // //         cout<<visited[i][j]<<" ";
        // //     }
        // //     cout<<endl;
        // // }
        // int count=0;
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<m;j++){
        //         if(visited[i][j]==0 and grid[i][j]==0){
        //             count++;
        //             solver(i,j,visited,grid);
        //         }
        //     }
        // }
        // return count;
        
        // So this was the depth first search approach in which we try to go in depth first rather
        // than covering one level elements first but now we will do breadth first search approach
        // in which we will try to cover all the level elements first rather than going in depth.
        
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> visited(n,vector<int>(m,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if((i==0 or j==0 or i==n-1 or j==m-1) and visited[i][j]==0 and grid[i][j]==0){
                    solver1(i,j,grid,visited);
                }
            }
        }
        int count=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(visited[i][j]==0 and grid[i][j]==0){
                    count++;
                    solver1(i,j,grid,visited);
                }
            }
        }
        return count;
    }
};
