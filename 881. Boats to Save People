class Solution {
public:
    int numRescueBoats(vector<int>& people, int limit) {
        int n=people.size();
        // multiset<int> st;
        // for(int i=0;i<n;i++){
        //     st.insert(people[i]);
        // }
        // int count=0;
        // for(auto it: st){
        //     int weight1=it;
        //     st.erase(st.find(it));
        //     int rem_possible=limit-weight1;
        //     auto it1=st.lower_bound(rem_possible);
        //     if(*it1>rem_possible){
        //         if(it1!=st.begin()){
        //             // continue;
        //             --it1;
        //             st.erase(it1);
        //         }
        //     }
        //     else{
        //         st.erase(it1);
        //     }
        //     count++;
        // }
        // return count;
        
        // This approach of mine was very wrong i was thinking something different but it can be 
        // solved using simple two pointer approach.
        int start=0;
        int end=n-1;
        int count=0;
        sort(people.begin(),people.end());
        while(start<=end){
            if(people[start]+people[end]<=limit){
                start++;end--;
            }
            else{
                end--;
            }
            count++;
        }
        return count;
        
        /*
        Intuition

        If the heaviest person can share a boat with the lightest person, then do so. Otherwise, the           heaviest person can't pair with anyone, so they get their own boat.

        The reason this works is because if the lightest person can pair with anyone, they might as           well pair with the heaviest person.

        Algorithm
        Let people[i] to the currently lightest person, and people[j] to the heaviest.

        Then, as described above, if the heaviest person can share a boat with the lightest person (if         people[j] + people[i] <= limit) then do so; otherwise, the heaviest person sits in their own           boat.
        */
    }
};
