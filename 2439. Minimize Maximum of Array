class Solution {
public:
    /*
    
    We have been given an array - n positive integers
    
    What we can do: 
    
    we can choose an index i - [1,n-1]
    we can decrease nums[i] by 1 => nums[i]=nums[i]-1;
    Increase nums[i-1] by 1 => nums[i-1]=nums[i-1]+1;
    
    Return the minimum possible value of maximum integer of nums
    
    We can perform this operation any number of times
    
    Example 1 - [3,7,1,6]  =  [4,6,1,6] = [5,5,1,6] = [5,5,2,5] 
    
    Case 1 - If max element is in the left corner 
                    In that case we can't do anything right
                    We will return that element only
    
    Case 2 - If not in left corner then we will try to reduce it as much as possible
    
    
    Another approach coming in my mind is we can use priority queue here 
    
    What we can do is we can store element with their indices as pair and we will try to reduce the 
    maximum element if there exists a lesser number than that number in the left and we will stop if
    we won't find any element in the left or lesser element in the immediate left.
    
    This approach also won't work as we can't update previous indexed elements in the priority queue if we increase them and that would be a problem in the later stage
    
    */
    
    // This approach -  TC - (n*log(max(nums[i]))) ,  SC - (O(1))
    // bool solver(int mid,vector<int>& nums){
    //     long long int pref_sum=0;
    //     int n=nums.size();
    //     for(int i=0;i<n;i++){
    //         pref_sum+=(nums[i]);
    //         if(pref_sum>(1ll*(i+1)*mid)){
    //             return false;
    //         }
    //     }
    //     return true;
    // }
    int minimizeArrayValue(vector<int>& nums) {
        // int n=nums.size();
        // int left=0;
        // int right=*max_element(nums.begin(),nums.end());
        // int ans=INT_MAX;
        // while(left<=right){
        //     int mid=left+(right-left)/2;
        //     if(solver(mid,nums)){
        //         ans=min(ans,mid);
        //         right=mid-1;
        //     }
        //     else{
        //         left=mid+1;
        //     }
        // }
        // return ans;
        
        
        // Approach - In this approach we are using the same concept of binary search here rather than finding suitable x we are just reversed the condition - (pref_sum)<= (i+1)*x 
        // So we can find x as x>= pref_sum/(i+1) for every index and then we will pick the max value of x as we want x to satisfy the whole array.
        // We have not used ceil here instead what we have done is we can write ceil(n/x) as (n+x-1)/x
        int n=nums.size();
        long long int pref_sum=0;
        long long int res=0;
        for(int i=0;i<n;i++){
            pref_sum+=(nums[i]);
            res=max(res,(pref_sum+i+1-1)/(i+1));
        }
        return res;
    }
};
